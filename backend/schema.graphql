# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  password: PasswordFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
}

type Product {
  id: ID!
  name: String
  description: String
  photo: ProductImage
  status: String
  price: Int
}

input ProductWhereUniqueInput {
  id: ID
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  photo: ProductImageWhereInput
  status: StringNullableFilter
  price: IntNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input ProductOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  status: OrderDirection
  price: OrderDirection
}

input ProductUpdateInput {
  name: String
  description: String
  photo: ProductImageRelateToOneForUpdateInput
  status: String
  price: Int
}

input ProductImageRelateToOneForUpdateInput {
  create: ProductImageCreateInput
  connect: ProductImageWhereUniqueInput
  disconnect: Boolean
}

input ProductUpdateArgs {
  where: ProductWhereUniqueInput!
  data: ProductUpdateInput!
}

input ProductCreateInput {
  name: String
  description: String
  photo: ProductImageRelateToOneForCreateInput
  status: String
  price: Int
}

input ProductImageRelateToOneForCreateInput {
  create: ProductImageCreateInput
  connect: ProductImageWhereUniqueInput
}

type ProductImage {
  id: ID!
  image: CloudinaryImage_File
  altText: String
  product: Product
}

type CloudinaryImage_File {
  id: ID
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """ Rewrites the filename to be this pretty string. Do not include `/` or `.`
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

input ProductImageWhereUniqueInput {
  id: ID
}

input ProductImageWhereInput {
  AND: [ProductImageWhereInput!]
  OR: [ProductImageWhereInput!]
  NOT: [ProductImageWhereInput!]
  id: IDFilter
  altText: StringFilter
  product: ProductWhereInput
}

input ProductImageOrderByInput {
  id: OrderDirection
  altText: OrderDirection
}

input ProductImageUpdateInput {
  image: Upload
  altText: String
  product: ProductRelateToOneForUpdateInput
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input ProductRelateToOneForUpdateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
  disconnect: Boolean
}

input ProductImageUpdateArgs {
  where: ProductImageWhereUniqueInput!
  data: ProductImageUpdateInput!
}

input ProductImageCreateInput {
  image: Upload
  altText: String
  product: ProductRelateToOneForCreateInput
}

input ProductRelateToOneForCreateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
}

type Listing {
  id: ID!
  accomodationName: String
  accomodationShortDescription: String
  accomodationDetailedtDescription: String
  licenceNum: String
  user: User
  address: Address
  photo(where: ListingImageWhereInput! = {}, orderBy: [ListingImageOrderByInput!]! = [], take: Int, skip: Int! = 0): [ListingImage!]
  photoCount(where: ListingImageWhereInput! = {}): Int
}

input ListingWhereUniqueInput {
  id: ID
}

input ListingWhereInput {
  AND: [ListingWhereInput!]
  OR: [ListingWhereInput!]
  NOT: [ListingWhereInput!]
  id: IDFilter
  accomodationName: StringFilter
  accomodationShortDescription: StringFilter
  accomodationDetailedtDescription: StringFilter
  licenceNum: StringFilter
  user: UserWhereInput
  address: AddressWhereInput
  photo: ListingImageManyRelationFilter
}

input ListingImageManyRelationFilter {
  every: ListingImageWhereInput
  some: ListingImageWhereInput
  none: ListingImageWhereInput
}

input ListingOrderByInput {
  id: OrderDirection
  accomodationName: OrderDirection
  accomodationShortDescription: OrderDirection
  accomodationDetailedtDescription: OrderDirection
  licenceNum: OrderDirection
}

input ListingUpdateInput {
  accomodationName: String
  accomodationShortDescription: String
  accomodationDetailedtDescription: String
  licenceNum: String
  user: UserRelateToOneForUpdateInput
  address: AddressRelateToOneForUpdateInput
  photo: ListingImageRelateToManyForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input AddressRelateToOneForUpdateInput {
  create: AddressCreateInput
  connect: AddressWhereUniqueInput
  disconnect: Boolean
}

input ListingImageRelateToManyForUpdateInput {
  disconnect: [ListingImageWhereUniqueInput!]
  set: [ListingImageWhereUniqueInput!]
  create: [ListingImageCreateInput!]
  connect: [ListingImageWhereUniqueInput!]
}

input ListingUpdateArgs {
  where: ListingWhereUniqueInput!
  data: ListingUpdateInput!
}

input ListingCreateInput {
  accomodationName: String
  accomodationShortDescription: String
  accomodationDetailedtDescription: String
  licenceNum: String
  user: UserRelateToOneForCreateInput
  address: AddressRelateToOneForCreateInput
  photo: ListingImageRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input AddressRelateToOneForCreateInput {
  create: AddressCreateInput
  connect: AddressWhereUniqueInput
}

input ListingImageRelateToManyForCreateInput {
  create: [ListingImageCreateInput!]
  connect: [ListingImageWhereUniqueInput!]
}

type Address {
  id: ID!
  streetNum: Int
  postalCode: String
  townName: String
  country: String
}

input AddressWhereUniqueInput {
  id: ID
}

input AddressWhereInput {
  AND: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
  id: IDFilter
  streetNum: IntFilter
  postalCode: StringFilter
  townName: StringFilter
  country: StringFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input AddressOrderByInput {
  id: OrderDirection
  streetNum: OrderDirection
  postalCode: OrderDirection
  townName: OrderDirection
  country: OrderDirection
}

input AddressUpdateInput {
  streetNum: Int
  postalCode: String
  townName: String
  country: String
}

input AddressUpdateArgs {
  where: AddressWhereUniqueInput!
  data: AddressUpdateInput!
}

input AddressCreateInput {
  streetNum: Int
  postalCode: String
  townName: String
  country: String
}

type ListingImage {
  id: ID!
  image: CloudinaryImage_File
  altText: String
}

input ListingImageWhereUniqueInput {
  id: ID
}

input ListingImageWhereInput {
  AND: [ListingImageWhereInput!]
  OR: [ListingImageWhereInput!]
  NOT: [ListingImageWhereInput!]
  id: IDFilter
  altText: StringFilter
}

input ListingImageOrderByInput {
  id: OrderDirection
  altText: OrderDirection
}

input ListingImageUpdateInput {
  image: Upload
  altText: String
}

input ListingImageUpdateArgs {
  where: ListingImageWhereUniqueInput!
  data: ListingImageUpdateInput!
}

input ListingImageCreateInput {
  image: Upload
  altText: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createProduct(data: ProductCreateInput!): Product
  createProducts(data: [ProductCreateInput!]!): [Product]
  updateProduct(where: ProductWhereUniqueInput!, data: ProductUpdateInput!): Product
  updateProducts(data: [ProductUpdateArgs!]!): [Product]
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteProducts(where: [ProductWhereUniqueInput!]!): [Product]
  createProductImage(data: ProductImageCreateInput!): ProductImage
  createProductImages(data: [ProductImageCreateInput!]!): [ProductImage]
  updateProductImage(where: ProductImageWhereUniqueInput!, data: ProductImageUpdateInput!): ProductImage
  updateProductImages(data: [ProductImageUpdateArgs!]!): [ProductImage]
  deleteProductImage(where: ProductImageWhereUniqueInput!): ProductImage
  deleteProductImages(where: [ProductImageWhereUniqueInput!]!): [ProductImage]
  createListing(data: ListingCreateInput!): Listing
  createListings(data: [ListingCreateInput!]!): [Listing]
  updateListing(where: ListingWhereUniqueInput!, data: ListingUpdateInput!): Listing
  updateListings(data: [ListingUpdateArgs!]!): [Listing]
  deleteListing(where: ListingWhereUniqueInput!): Listing
  deleteListings(where: [ListingWhereUniqueInput!]!): [Listing]
  createAddress(data: AddressCreateInput!): Address
  createAddresses(data: [AddressCreateInput!]!): [Address]
  updateAddress(where: AddressWhereUniqueInput!, data: AddressUpdateInput!): Address
  updateAddresses(data: [AddressUpdateArgs!]!): [Address]
  deleteAddress(where: AddressWhereUniqueInput!): Address
  deleteAddresses(where: [AddressWhereUniqueInput!]!): [Address]
  createListingImage(data: ListingImageCreateInput!): ListingImage
  createListingImages(data: [ListingImageCreateInput!]!): [ListingImage]
  updateListingImage(where: ListingImageWhereUniqueInput!, data: ListingImageUpdateInput!): ListingImage
  updateListingImages(data: [ListingImageUpdateArgs!]!): [ListingImage]
  deleteListingImage(where: ListingImageWhereUniqueInput!): ListingImage
  deleteListingImages(where: [ListingImageWhereUniqueInput!]!): [ListingImage]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  products(where: ProductWhereInput! = {}, orderBy: [ProductOrderByInput!]! = [], take: Int, skip: Int! = 0): [Product!]
  product(where: ProductWhereUniqueInput!): Product
  productsCount(where: ProductWhereInput! = {}): Int
  productImages(where: ProductImageWhereInput! = {}, orderBy: [ProductImageOrderByInput!]! = [], take: Int, skip: Int! = 0): [ProductImage!]
  productImage(where: ProductImageWhereUniqueInput!): ProductImage
  productImagesCount(where: ProductImageWhereInput! = {}): Int
  listings(where: ListingWhereInput! = {}, orderBy: [ListingOrderByInput!]! = [], take: Int, skip: Int! = 0): [Listing!]
  listing(where: ListingWhereUniqueInput!): Listing
  listingsCount(where: ListingWhereInput! = {}): Int
  addresses(where: AddressWhereInput! = {}, orderBy: [AddressOrderByInput!]! = [], take: Int, skip: Int! = 0): [Address!]
  address(where: AddressWhereUniqueInput!): Address
  addressesCount(where: AddressWhereInput! = {}): Int
  listingImages(where: ListingImageWhereInput! = {}, orderBy: [ListingImageOrderByInput!]! = [], take: Int, skip: Int! = 0): [ListingImage!]
  listingImage(where: ListingImageWhereUniqueInput!): ListingImage
  listingImagesCount(where: ListingImageWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
